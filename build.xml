<?xml version="1.0"?>

<project name="Lucene Web Service 3" basedir="." default="dist">
	
	<property file="${basedir}/build.properties" />

	<property name="application.name" value="lucene3" />
	<property name="application.path" value="/${application.name}" />

	<property name="war.dir" value="${basedir}/war" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="source.dir" value="${basedir}/src" />
	<property name="test.source.dir" value="${basedir}/src" />
	<property name="build.dir" value="${basedir}/bin" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="weblib.dir" value="${war.dir}/WEB-INF/lib" />
	<property name="dist.dir" value="dist" />
	<property name="include.dependencies" value="false" />

	<property name="war.file" value="${dist.dir}/${application.name}.war" />

	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	
	<property name="debug.target.dir" value="${basedir}/debug" />
	<property name="default.target.dir" value="${basedir}/test-reports" />

	<property name="emma.coverage.file" value="${basedir}/test-reports/coverage.emma" />
	
	<property name="test.report.dir" value="${basedir}/test-reports" />
	<property name="test.pattern" value="**/*Test*.java" />
	
	<path id="lib.class.path">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="init">
	</target>

	<target name="clean" description="Clean output dirs (build, weblib, dist)">

		<delete dir="${build.dir}" />
		<delete dir="${weblib.dir}" />
		<delete dir="${dist.dir}" />
		<delete file="client/${application.name}.jar" />

	</target>

	<target name="compile" description="Compile main source tree java files into class files, generate jar files">

		<mkdir dir="${build.dir}" />

		<javac srcdir="${src.dir}" destdir="${build.dir}" debug="${compile.debug}" optimize="${compile.optimize}" deprecation="${compile.deprecation}">
			<classpath>
				<path refid="lib.class.path" />
			</classpath>
		</javac>

		<copy todir="${build.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<mkdir dir="${weblib.dir}" />

		<jar jarfile="${weblib.dir}/${application.name}.jar" compress="true" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="net.lucenews3.lucene.support.ServerLauncher" />
			</manifest>
		</jar>

		<if>
			<equals arg1="${include.dependencies}" arg2="true" />
			<then>
				<copy todir="${weblib.dir}" preservelastmodified="true">
					<fileset dir="${lib.dir}">
						<include name="*.jar" />
					</fileset>
				</copy>
			</then>
		</if>

	</target>


	<target name="dist" depends="war">
		<!-- 
			Delegate to war target by depending on it. dist is just to offer
			a generic target name across all Spring sample apps that may be used
			for autobuilds testing.
		-->
	</target>


	<target name="war" depends="compile" description="Build the web application archive">
		<mkdir dir="${dist.dir}" />
		<war warfile="${war.file}" basedir="${war.dir}" webxml="${war.dir}/WEB-INF/web.xml">
			<classes dir="${build.dir}" />
			<!--
			<if name="include.dependencies" value="true">
				<equals arg1="${include.dependencies}" arg2="true"/>
				<then>
					<lib dir="${weblib.dir}">
						<include name="*.jar"/>
					</lib>
				</then>
			</if>
			-->
		</war>
	</target>

	<target name="deploy" depends="war" description="Deploy application to Apache Tomcat">
		<deploy url="${tomcat.manager.url}" username="${tomcat.manager.user}" password="${tomcat.manager.password}" path="${application.path}" war="file:${war.file}" />
	</target>

	<target name="undeploy" description="Undeploy application from Apache Tomcat">
		<undeploy url="${tomcat.manager.url}" username="${tomcat.manager.user}" password="${tomcat.manager.password}" path="${application.path}" />
	</target>

	<target name="redeploy" description="Undeploy (if currently deployed), then deploy application to Apache Tomcat">
		<try>
			<antcall target="undeploy" />
		</try>
		<antcall target="deploy" />
	</target>

	<target name="reload" description="Reload application on Apache Tomcat">
		<reload url="${tomcat.manager.url}" username="${tomcat.manager.user}" password="${tomcat.manager.password}" path="${application.path}" />
	</target>

	<target name="start" description="Start application on Apache Tomcat">
		<start url="${tomcat.manager.url}" username="${tomcat.manager.user}" password="${tomcat.manager.password}" path="${application.path}" />
	</target>

	<target name="stop" description="Stop application on Apache Tomcat">
		<start url="${tomcat.manager.url}" username="${tomcat.manager.user}" password="${tomcat.manager.password}" path="${application.path}" />
	</target>

	<target name="run" depends="war">
		<jetty tempDirectory="jetty-temp">
			<webApp name="lucenews3" warfile="${war.file}" contextpath="/lucene3" />
			<connectors>
				<selectChannelConnector port="${jetty.port}" />
			</connectors>
		</jetty>
	</target>

	<!-- build.classpath -->
	<target name="test" depends="compile" description="Runs JUnit tests">
		<mkdir dir="${test.report.dir}" />
		<junit dir="${basedir}" printSummary="on" fork="true" haltonfailure="false">
			<sysproperty key="basedir" value="${basedir}" />
			<formatter type="xml" />
			<classpath>
				<path refid="lib.class.path" />
				<pathelement path="${test.classes.dir}" />
				<pathelement path="${build.dir}" />
			</classpath>
			<!-- ${emma.coverage.file} -->
			<jvmarg value="-Demma.coverage.out.file=coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.source.dir}">
					<include name="${test.pattern}" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<target name="pmd" depends="init" description="Runs PMD checks against code">
		<mkdir dir="${default.target.dir}" />
		<pmd>
			<ruleset>rulesets/basic.xml</ruleset>
			<ruleset>rulesets/braces.xml</ruleset>
			<ruleset>rulesets/javabeans.xml</ruleset>
			<ruleset>rulesets/unusedcode.xml</ruleset>
			<ruleset>rulesets/strings.xml</ruleset>
			<ruleset>rulesets/design.xml</ruleset>
			<ruleset>rulesets/coupling.xml</ruleset>
			<ruleset>rulesets/codesize.xml</ruleset>
			<ruleset>rulesets/imports.xml</ruleset>
			<!--<ruleset>rulesets/naming.xml</ruleset>-->
			<formatter type="xml" toFile="${default.target.dir}/pmd_report.xml" />
			<fileset dir="${source.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>
	
	<!-- TODO depends upon "jar" -->
	<target name="findbugs" depends="compile">
		<mkdir dir="${debug.target.dir}" />
		<findbugs classpathref="lib.class.path" pluginlist="${lib.dir}/coreplugin.jar" output="xml" outputFile="${debug.target.dir}/findbugs.xml">
			<sourcePath path="${source.dir}" />
			<class location="${weblib.dir}/${application.name}.jar" />
		</findbugs>
	</target>

	<!-- Register external task definitions -->

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
		<classpath>
			<pathelement location="lib/catalina-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="list" classname="org.apache.catalina.ant.ListTask">
		<classpath>
			<pathelement location="lib/catalina-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
		<classpath>
			<pathelement location="lib/catalina-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
		<classpath>
			<pathelement location="lib/catalina-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="try" classname="ise.antelope.tasks.TryTask">
		<classpath>
			<pathelement location="lib/AntelopeTasks_3.4.2.jar" />
		</classpath>
	</taskdef>

	<path id="jetty.plugin.classpath">
		<fileset dir="lib" includes="*.jar" />
	</path>

	<taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader">
	</taskdef>

	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="lib.class.path" />
	
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="lib.class.path" />
	
	<typedef name="selectChannelConnector" classname="org.mortbay.jetty.nio.SelectChannelConnector" classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

</project>
